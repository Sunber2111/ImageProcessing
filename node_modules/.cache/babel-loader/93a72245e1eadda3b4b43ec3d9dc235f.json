{"ast":null,"code":"const Jimp = require('jimp');\n\nasync function onRuntimeInitialized(url) {\n  // load local image file with jimp. It supports jpg, png, bmp, tiff and gif:\n  var jimpSrc = await Jimp.read(url); // `jimpImage.bitmap` property has the decoded ImageData that we can use to create a cv:Mat\n\n  var src = cv.matFromImageData(jimpSrc.bitmap); // following lines is copy&paste of opencv.js dilate tutorial:\n\n  let dst = new cv.Mat();\n  let M = cv.Mat.ones(5, 5, cv.CV_8U);\n  let anchor = new cv.Point(-1, -1);\n  cv.dilate(src, dst, M, anchor, 1, cv.BORDER_CONSTANT, cv.morphologyDefaultBorderValue()); // Now that we are finish, we want to write `dst` to file `output.png`. For this we create a `Jimp`\n  // image which accepts the image data as a [`Buffer`](https://nodejs.org/docs/latest-v10.x/api/buffer.html).\n  // `write('output.png')` will write it to disk and Jimp infers the output format from given file name:\n\n  new Jimp({\n    width: dst.cols,\n    height: dst.rows,\n    data: Buffer.from(dst.data)\n  }).write('output.png');\n  src.delete();\n  dst.delete();\n}\n\nmodule.exports = onRuntimeInitialized;\ncv = require('./opencv.js');","map":{"version":3,"sources":["D:/XLA/project/node_modules/myOpencv/index.js"],"names":["Jimp","require","onRuntimeInitialized","url","jimpSrc","read","src","cv","matFromImageData","bitmap","dst","Mat","M","ones","CV_8U","anchor","Point","dilate","BORDER_CONSTANT","morphologyDefaultBorderValue","width","cols","height","rows","data","Buffer","from","write","delete","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,eAAeC,oBAAf,CAAoCC,GAApC,EAAwC;AACtC;AACA,MAAIC,OAAO,GAAG,MAAMJ,IAAI,CAACK,IAAL,CAAUF,GAAV,CAApB,CAFsC,CAGtC;;AACA,MAAIG,GAAG,GAAGC,EAAE,CAACC,gBAAH,CAAoBJ,OAAO,CAACK,MAA5B,CAAV,CAJsC,CAKtC;;AACA,MAAIC,GAAG,GAAG,IAAIH,EAAE,CAACI,GAAP,EAAV;AACA,MAAIC,CAAC,GAAGL,EAAE,CAACI,GAAH,CAAOE,IAAP,CAAY,CAAZ,EAAe,CAAf,EAAkBN,EAAE,CAACO,KAArB,CAAR;AACA,MAAIC,MAAM,GAAG,IAAIR,EAAE,CAACS,KAAP,CAAa,CAAC,CAAd,EAAiB,CAAC,CAAlB,CAAb;AACAT,EAAAA,EAAE,CAACU,MAAH,CAAUX,GAAV,EAAeI,GAAf,EAAoBE,CAApB,EAAuBG,MAAvB,EAA+B,CAA/B,EAAkCR,EAAE,CAACW,eAArC,EAAsDX,EAAE,CAACY,4BAAH,EAAtD,EATsC,CAUtC;AACA;AACA;;AACA,MAAInB,IAAJ,CAAS;AACPoB,IAAAA,KAAK,EAAEV,GAAG,CAACW,IADJ;AAEPC,IAAAA,MAAM,EAAEZ,GAAG,CAACa,IAFL;AAGPC,IAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAYhB,GAAG,CAACc,IAAhB;AAHC,GAAT,EAKCG,KALD,CAKO,YALP;AAMArB,EAAAA,GAAG,CAACsB,MAAJ;AACAlB,EAAAA,GAAG,CAACkB,MAAJ;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB5B,oBAAjB;AAEAK,EAAE,GAAGN,OAAO,CAAC,aAAD,CAAZ","sourcesContent":["const Jimp = require('jimp');\r\n\r\nasync function onRuntimeInitialized(url){\r\n  // load local image file with jimp. It supports jpg, png, bmp, tiff and gif:\r\n  var jimpSrc = await Jimp.read(url);\r\n  // `jimpImage.bitmap` property has the decoded ImageData that we can use to create a cv:Mat\r\n  var src = cv.matFromImageData(jimpSrc.bitmap);\r\n  // following lines is copy&paste of opencv.js dilate tutorial:\r\n  let dst = new cv.Mat();\r\n  let M = cv.Mat.ones(5, 5, cv.CV_8U);\r\n  let anchor = new cv.Point(-1, -1);\r\n  cv.dilate(src, dst, M, anchor, 1, cv.BORDER_CONSTANT, cv.morphologyDefaultBorderValue());\r\n  // Now that we are finish, we want to write `dst` to file `output.png`. For this we create a `Jimp`\r\n  // image which accepts the image data as a [`Buffer`](https://nodejs.org/docs/latest-v10.x/api/buffer.html).\r\n  // `write('output.png')` will write it to disk and Jimp infers the output format from given file name:\r\n  new Jimp({\r\n    width: dst.cols,\r\n    height: dst.rows,\r\n    data: Buffer.from(dst.data)\r\n  })\r\n  .write('output.png');\r\n  src.delete();\r\n  dst.delete();\r\n}\r\n\r\nmodule.exports = onRuntimeInitialized\r\n\r\ncv = require('./opencv.js');"]},"metadata":{},"sourceType":"script"}