{"ast":null,"code":"const cv = require('./opencv');\n\nconst {\n  createCanvas,\n  Image,\n  loadImage,\n  createImageData\n} = require('canvas');\n\nlet canvas = {};\nlet image = {};\n\nconst color2Gray = async url => {\n  image = await loadImage(url);\n  const src = cv.imread(image);\n  let dst = new cv.Mat(src.size(), 0);\n\n  for (let row = 0; row < src.rows; row++) {\n    for (let col = 0; col < src.cols; col++) {\n      dst.ucharPtr(row, col)[0] = Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3);\n    }\n  }\n\n  canvas = createCanvas(image.width, image.height);\n  cv.imshow(canvas, dst);\n  src.delete();\n  dst.delete();\n  return canvas.toDataURL();\n};\n\nmodule.exports = {\n  color2Gray\n};","map":{"version":3,"sources":["D:/XLA/project/node_modules/opencv/index.js"],"names":["cv","require","createCanvas","Image","loadImage","createImageData","canvas","image","color2Gray","url","src","imread","dst","Mat","size","row","rows","col","cols","ucharPtr","Math","round","width","height","imshow","delete","toDataURL","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,KAAhB;AAAwBC,EAAAA,SAAxB;AAAmCC,EAAAA;AAAnC,IAAuDJ,OAAO,CAAC,QAAD,CAApE;;AAEA,IAAIK,MAAM,GAAG,EAAb;AACA,IAAIC,KAAK,GAAG,EAAZ;;AAEA,MAAMC,UAAU,GAAG,MAAMC,GAAN,IAAa;AAE5BF,EAAAA,KAAK,GAAG,MAAMH,SAAS,CAACK,GAAD,CAAvB;AAEA,QAAMC,GAAG,GAAGV,EAAE,CAACW,MAAH,CAAUJ,KAAV,CAAZ;AAEA,MAAIK,GAAG,GAAG,IAAIZ,EAAE,CAACa,GAAP,CAAWH,GAAG,CAACI,IAAJ,EAAX,EAAuB,CAAvB,CAAV;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,GAAG,CAACM,IAA5B,EAAkCD,GAAG,EAArC,EAAyC;AACrC,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGP,GAAG,CAACQ,IAA5B,EAAkCD,GAAG,EAArC,EAAyC;AAErCL,MAAAA,GAAG,CAACO,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,IACIG,IAAI,CAACC,KAAL,CAAW,CAACX,GAAG,CAACS,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,IAA4BP,GAAG,CAACS,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,CAA5B,GAAwDP,GAAG,CAACS,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,CAAzD,IAAsF,CAAjG,CADJ;AAGH;AACJ;;AAEDX,EAAAA,MAAM,GAAGJ,YAAY,CAACK,KAAK,CAACe,KAAP,EAAcf,KAAK,CAACgB,MAApB,CAArB;AAEAvB,EAAAA,EAAE,CAACwB,MAAH,CAAUlB,MAAV,EAAkBM,GAAlB;AACAF,EAAAA,GAAG,CAACe,MAAJ;AACAb,EAAAA,GAAG,CAACa,MAAJ;AAEA,SAAOnB,MAAM,CAACoB,SAAP,EAAP;AACH,CAxBD;;AA0BAC,MAAM,CAACC,OAAP,GAAiB;AACbpB,EAAAA;AADa,CAAjB","sourcesContent":["const cv = require('./opencv')\r\nconst { createCanvas, Image , loadImage, createImageData } = require('canvas')\r\n\r\nlet canvas = {}\r\nlet image = {}\r\n\r\nconst color2Gray = async url => {\r\n\r\n    image = await loadImage(url)\r\n\r\n    const src = cv.imread(image)\r\n\r\n    let dst = new cv.Mat(src.size(), 0)\r\n\r\n    for (let row = 0; row < src.rows; row++) {\r\n        for (let col = 0; col < src.cols; col++) {\r\n\r\n            dst.ucharPtr(row, col)[0] = \r\n                Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3)\r\n\r\n        }\r\n    }    \r\n\r\n    canvas = createCanvas(image.width, image.height)\r\n\r\n    cv.imshow(canvas, dst)\r\n    src.delete()\r\n    dst.delete()\r\n\r\n    return canvas.toDataURL()\r\n}\r\n\r\nmodule.exports = {\r\n    color2Gray\r\n}"]},"metadata":{},"sourceType":"script"}