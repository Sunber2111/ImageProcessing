{"ast":null,"code":"const cv = require('./opencv');\n\nconst {\n  createCanvas,\n  Image,\n  loadImage,\n  createImageData\n} = require('canvas');\n\nconst common = async (url, next = null) => {\n  image = await loadImage(url);\n  const src = cv.imread(image);\n  let dst = new cv.Mat(src.size(), 0);\n  let canvas = createCanvas(image.width, image.height);\n\n  if (next) {\n    next(src, dst);\n  } else {\n    // default return grayscale\n    cv.imshow(canvas, src);\n    src.delete();\n    dst.delete();\n    return canvas.toDataURL();\n  }\n\n  cv.imshow(canvas, dst);\n  src.delete();\n  dst.delete();\n  return canvas.toDataURL();\n};\n\nconst color2Gray = async url => {\n  try {\n    let func = (src, dst) => {\n      for (let row = 0; row < src.rows; row++) {\n        for (let col = 0; col < src.cols; col++) {\n          dst.ucharPtr(row, col)[0] = Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3);\n        }\n      }\n    };\n\n    return await common(url, func);\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst convertToBase64 = async url => {\n  try {\n    return await common(url);\n  } catch (error) {\n    throw error;\n  }\n};\n\nmodule.exports = {\n  color2Gray,\n  convertToBase64\n};","map":{"version":3,"sources":["D:/XLA/project/node_modules/opencv/index.js"],"names":["cv","require","createCanvas","Image","loadImage","createImageData","common","url","next","image","src","imread","dst","Mat","size","canvas","width","height","imshow","delete","toDataURL","color2Gray","func","row","rows","col","cols","ucharPtr","Math","round","error","convertToBase64","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,KAAhB;AAAwBC,EAAAA,SAAxB;AAAmCC,EAAAA;AAAnC,IAAuDJ,OAAO,CAAC,QAAD,CAApE;;AAEA,MAAMK,MAAM,GAAG,OAAOC,GAAP,EAAWC,IAAI,GAAC,IAAhB,KAAyB;AAEpCC,EAAAA,KAAK,GAAG,MAAML,SAAS,CAACG,GAAD,CAAvB;AACA,QAAMG,GAAG,GAAGV,EAAE,CAACW,MAAH,CAAUF,KAAV,CAAZ;AACA,MAAIG,GAAG,GAAG,IAAIZ,EAAE,CAACa,GAAP,CAAWH,GAAG,CAACI,IAAJ,EAAX,EAAuB,CAAvB,CAAV;AACA,MAAIC,MAAM,GAAGb,YAAY,CAACO,KAAK,CAACO,KAAP,EAAcP,KAAK,CAACQ,MAApB,CAAzB;;AACA,MAAGT,IAAH,EACA;AACIA,IAAAA,IAAI,CAACE,GAAD,EAAKE,GAAL,CAAJ;AACH,GAHD,MAKA;AACI;AACAZ,IAAAA,EAAE,CAACkB,MAAH,CAAUH,MAAV,EAAkBL,GAAlB;AACAA,IAAAA,GAAG,CAACS,MAAJ;AACAP,IAAAA,GAAG,CAACO,MAAJ;AACA,WAAOJ,MAAM,CAACK,SAAP,EAAP;AACH;;AACDpB,EAAAA,EAAE,CAACkB,MAAH,CAAUH,MAAV,EAAkBH,GAAlB;AACAF,EAAAA,GAAG,CAACS,MAAJ;AACAP,EAAAA,GAAG,CAACO,MAAJ;AACA,SAAOJ,MAAM,CAACK,SAAP,EAAP;AAEH,CAvBD;;AAyBA,MAAMC,UAAU,GAAG,MAAMd,GAAN,IAAa;AAC5B,MAAI;AAEA,QAAIe,IAAI,GAAG,CAACZ,GAAD,EAAKE,GAAL,KAAW;AAClB,WAAK,IAAIW,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGb,GAAG,CAACc,IAA5B,EAAkCD,GAAG,EAArC,EAAyC;AACrC,aAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGf,GAAG,CAACgB,IAA5B,EAAkCD,GAAG,EAArC,EAAyC;AAErCb,UAAAA,GAAG,CAACe,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,IACIG,IAAI,CAACC,KAAL,CAAW,CAACnB,GAAG,CAACiB,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,IAA4Bf,GAAG,CAACiB,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,CAA5B,GAAwDf,GAAG,CAACiB,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,CAAzD,IAAsF,CAAjG,CADJ;AAGH;AACJ;AACJ,KATD;;AAWA,WAAO,MAAMnB,MAAM,CAACC,GAAD,EAAKe,IAAL,CAAnB;AAEH,GAfD,CAeE,OAAOQ,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CAnBD;;AAqBA,MAAMC,eAAe,GAAG,MAAMxB,GAAN,IAAY;AAChC,MAAI;AAEA,WAAO,MAAMD,MAAM,CAACC,GAAD,CAAnB;AAEH,GAJD,CAIE,OAAOuB,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH;AACJ,CARD;;AAUAE,MAAM,CAACC,OAAP,GAAiB;AACbZ,EAAAA,UADa;AAEbU,EAAAA;AAFa,CAAjB","sourcesContent":["const cv = require('./opencv')\r\nconst { createCanvas, Image , loadImage, createImageData } = require('canvas')\r\n\r\nconst common = async (url,next=null) => {\r\n\r\n    image = await loadImage(url)\r\n    const src = cv.imread(image)\r\n    let dst = new cv.Mat(src.size(), 0)\r\n    let canvas = createCanvas(image.width, image.height)\r\n    if(next)\r\n    {    \r\n        next(src,dst)\r\n    }\r\n    else\r\n    {\r\n        // default return grayscale\r\n        cv.imshow(canvas, src)\r\n        src.delete()\r\n        dst.delete()\r\n        return canvas.toDataURL()\r\n    }\r\n    cv.imshow(canvas, dst)\r\n    src.delete()\r\n    dst.delete()\r\n    return canvas.toDataURL()\r\n    \r\n}\r\n\r\nconst color2Gray = async url => {   \r\n    try {\r\n\r\n        let func = (src,dst)=>{\r\n            for (let row = 0; row < src.rows; row++) {\r\n                for (let col = 0; col < src.cols; col++) {\r\n        \r\n                    dst.ucharPtr(row, col)[0] = \r\n                        Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3)\r\n        \r\n                }\r\n            }   \r\n        } \r\n    \r\n        return await common(url,func)\r\n\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nconst convertToBase64 = async url =>{\r\n    try {\r\n\r\n        return await common(url)\r\n\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    color2Gray,\r\n    convertToBase64\r\n}"]},"metadata":{},"sourceType":"script"}