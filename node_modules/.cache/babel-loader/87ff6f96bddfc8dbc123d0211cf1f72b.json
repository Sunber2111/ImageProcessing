{"ast":null,"code":"const cv = require('./opencv');\n\nconst {\n  createCanvas,\n  Image,\n  loadImage,\n  createImageData\n} = require('canvas');\n\nconst color2Gray = async url => {\n  const image = await loadImage(url);\n  const src = cv.imread(image);\n  console.log(roughSizeOfObject(src) / 125000);\n  let dst = new cv.Mat(src.size(), 0);\n  let Midle = 0;\n\n  for (let row = 0; row < src.rows; row++) {\n    for (let col = 0; col < src.cols; col++) {\n      dst.ucharPtr(row, col)[0] = Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3);\n    }\n  }\n\n  const canvas = createCanvas(image.width, image.height);\n  cv.imshow(canvas, dst);\n  return canvas;\n};\n\nfunction roughSizeOfObject(object) {\n  var objectList = [];\n\n  var recurse = function (value) {\n    var bytes = 0;\n\n    if (typeof value === 'boolean') {\n      bytes = 4;\n    } else if (typeof value === 'string') {\n      bytes = value.length * 2;\n    } else if (typeof value === 'number') {\n      bytes = 8;\n    } else if (typeof value === 'object' && objectList.indexOf(value) === -1) {\n      objectList[objectList.length] = value;\n\n      for (i in value) {\n        bytes += 8; // an assumed existence overhead\n\n        bytes += recurse(value[i]);\n      }\n    }\n\n    return bytes;\n  };\n\n  return recurse(object);\n}\n\nmodule.exports = {\n  color2Gray\n};","map":{"version":3,"sources":["D:/XLA/project/node_modules/opencv/index.js"],"names":["cv","require","createCanvas","Image","loadImage","createImageData","color2Gray","url","image","src","imread","console","log","roughSizeOfObject","dst","Mat","size","Midle","row","rows","col","cols","ucharPtr","Math","round","canvas","width","height","imshow","object","objectList","recurse","value","bytes","length","indexOf","i","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,KAAhB;AAAwBC,EAAAA,SAAxB;AAAmCC,EAAAA;AAAnC,IAAuDJ,OAAO,CAAC,QAAD,CAApE;;AAEA,MAAMK,UAAU,GAAG,MAAMC,GAAN,IAAa;AAE5B,QAAMC,KAAK,GAAG,MAAMJ,SAAS,CAACG,GAAD,CAA7B;AAEA,QAAME,GAAG,GAAGT,EAAE,CAACU,MAAH,CAAUF,KAAV,CAAZ;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,iBAAiB,CAACJ,GAAD,CAAjB,GAAuB,MAAnC;AAEA,MAAIK,GAAG,GAAG,IAAId,EAAE,CAACe,GAAP,CAAWN,GAAG,CAACO,IAAJ,EAAX,EAAuB,CAAvB,CAAV;AAEA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGT,GAAG,CAACU,IAA5B,EAAkCD,GAAG,EAArC,EAAyC;AACrC,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,GAAG,CAACY,IAA5B,EAAkCD,GAAG,EAArC,EAAyC;AAErCN,MAAAA,GAAG,CAACQ,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,IAA4BG,IAAI,CAACC,KAAL,CAAW,CAACf,GAAG,CAACa,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,IAA4BX,GAAG,CAACa,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,CAA5B,GAAwDX,GAAG,CAACa,QAAJ,CAAaJ,GAAb,EAAkBE,GAAlB,EAAuB,CAAvB,CAAzD,IAAsF,CAAjG,CAA5B;AAEH;AACJ;;AAED,QAAMK,MAAM,GAAGvB,YAAY,CAACM,KAAK,CAACkB,KAAP,EAAclB,KAAK,CAACmB,MAApB,CAA3B;AAEA3B,EAAAA,EAAE,CAAC4B,MAAH,CAAUH,MAAV,EAAkBX,GAAlB;AAEA,SAAOW,MAAP;AACH,CAzBD;;AA2BA,SAASZ,iBAAT,CAA4BgB,MAA5B,EAAqC;AAEjC,MAAIC,UAAU,GAAG,EAAjB;;AAEA,MAAIC,OAAO,GAAG,UAAUC,KAAV,EACd;AACI,QAAIC,KAAK,GAAG,CAAZ;;AAEA,QAAK,OAAOD,KAAP,KAAiB,SAAtB,EAAkC;AAC9BC,MAAAA,KAAK,GAAG,CAAR;AACH,KAFD,MAGK,IAAK,OAAOD,KAAP,KAAiB,QAAtB,EAAiC;AAClCC,MAAAA,KAAK,GAAGD,KAAK,CAACE,MAAN,GAAe,CAAvB;AACH,KAFI,MAGA,IAAK,OAAOF,KAAP,KAAiB,QAAtB,EAAiC;AAClCC,MAAAA,KAAK,GAAG,CAAR;AACH,KAFI,MAGA,IAED,OAAOD,KAAP,KAAiB,QAAjB,IACGF,UAAU,CAACK,OAAX,CAAoBH,KAApB,MAAgC,CAAC,CAHnC,EAKL;AACIF,MAAAA,UAAU,CAAEA,UAAU,CAACI,MAAb,CAAV,GAAkCF,KAAlC;;AAEA,WAAKI,CAAL,IAAUJ,KAAV,EAAkB;AACdC,QAAAA,KAAK,IAAG,CAAR,CADc,CACH;;AACXA,QAAAA,KAAK,IAAGF,OAAO,CAAEC,KAAK,CAACI,CAAD,CAAP,CAAf;AACH;AACJ;;AAED,WAAOH,KAAP;AACH,GA5BD;;AA8BA,SAAOF,OAAO,CAAEF,MAAF,CAAd;AACH;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACbhC,EAAAA;AADa,CAAjB","sourcesContent":["const cv = require('./opencv')\r\nconst { createCanvas, Image , loadImage, createImageData } = require('canvas')\r\n\r\nconst color2Gray = async url => {\r\n\r\n    const image = await loadImage(url)\r\n\r\n    const src = cv.imread(image)\r\n\r\n    console.log(roughSizeOfObject(src)/125000)\r\n\r\n    let dst = new cv.Mat(src.size(), 0)\r\n\r\n    let Midle = 0\r\n\r\n    for (let row = 0; row < src.rows; row++) {\r\n        for (let col = 0; col < src.cols; col++) {\r\n\r\n            dst.ucharPtr(row, col)[0] = Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3)\r\n\r\n        }\r\n    }    \r\n\r\n    const canvas = createCanvas(image.width, image.height)\r\n\r\n    cv.imshow(canvas, dst)\r\n\r\n    return canvas\r\n}\r\n\r\nfunction roughSizeOfObject( object ) {\r\n\r\n    var objectList = [];\r\n\r\n    var recurse = function( value )\r\n    {\r\n        var bytes = 0;\r\n\r\n        if ( typeof value === 'boolean' ) {\r\n            bytes = 4;\r\n        }\r\n        else if ( typeof value === 'string' ) {\r\n            bytes = value.length * 2;\r\n        }\r\n        else if ( typeof value === 'number' ) {\r\n            bytes = 8;\r\n        }\r\n        else if\r\n        (\r\n            typeof value === 'object'\r\n            && objectList.indexOf( value ) === -1\r\n        )\r\n        {\r\n            objectList[ objectList.length ] = value;\r\n\r\n            for( i in value ) {\r\n                bytes+= 8; // an assumed existence overhead\r\n                bytes+= recurse( value[i] )\r\n            }\r\n        }\r\n\r\n        return bytes;\r\n    }\r\n\r\n    return recurse( object );\r\n}\r\n\r\nmodule.exports = {\r\n    color2Gray\r\n}"]},"metadata":{},"sourceType":"script"}