{"ast":null,"code":"import { CREATE_PICTURE } from '../constants/types';\nimport jimp from 'jimp';\nimport onRuntimeInitialized from 'myOpencv';\n\nconst {\n  createCanvas,\n  createImageData\n} = require('canvas');\n\nexport const createPicture = url => async dispatch => {\n  try {\n    onRuntimeInitialized(url);\n    let data = (await jimp.read(url)).bitmap;\n    const canvas = createImageData(data.data, data.width, data.height);\n    console.log(canvas.data);\n    dispatch({\n      type: CREATE_PICTURE,\n      payload: url\n    });\n  } catch (error) {}\n};","map":{"version":3,"sources":["D:/XLA/project/src/redux/actions/picture.js"],"names":["CREATE_PICTURE","jimp","onRuntimeInitialized","createCanvas","createImageData","require","createPicture","url","dispatch","data","read","bitmap","canvas","width","height","console","log","type","payload","error"],"mappings":"AAAA,SAASA,cAAT,QAA+B,oBAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,oBAAP,MAAiC,UAAjC;;AAEA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,IAAoCC,OAAO,CAAC,QAAD,CAAjD;;AAIA,OAAO,MAAMC,aAAa,GAAGC,GAAG,IAAI,MAAMC,QAAN,IAAkB;AAClD,MAAI;AAEAN,IAAAA,oBAAoB,CAACK,GAAD,CAApB;AAEA,QAAIE,IAAI,GAAG,CAAC,MAAMR,IAAI,CAACS,IAAL,CAAUH,GAAV,CAAP,EAAuBI,MAAlC;AAEA,UAAMC,MAAM,GAAGR,eAAe,CAACK,IAAI,CAACA,IAAN,EAAWA,IAAI,CAACI,KAAhB,EAAuBJ,IAAI,CAACK,MAA5B,CAA9B;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACH,IAAnB;AAEAD,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAEjB,cADD;AAELkB,MAAAA,OAAO,EAAEX;AAFJ,KAAD,CAAR;AAKH,GAfD,CAeE,OAAOY,KAAP,EAAc,CAEf;AACJ,CAnBM","sourcesContent":["import { CREATE_PICTURE } from '../constants/types'\r\nimport jimp from 'jimp'\r\nimport onRuntimeInitialized from 'myOpencv'\r\n\r\nconst { createCanvas, createImageData } = require('canvas')\r\n\r\n\r\n\r\nexport const createPicture = url => async dispatch => {\r\n    try {\r\n\r\n        onRuntimeInitialized(url)\r\n        \r\n        let data = (await jimp.read(url)).bitmap\r\n\r\n        const canvas = createImageData(data.data,data.width, data.height)\r\n\r\n        console.log(canvas.data)\r\n        \r\n        dispatch({\r\n            type: CREATE_PICTURE,\r\n            payload: url\r\n        })\r\n\r\n    } catch (error) {\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}