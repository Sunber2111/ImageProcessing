{"ast":null,"code":"const cv = require('./opencv');\n\nconst {\n  createCanvas,\n  Image,\n  loadImage,\n  createImageData\n} = require('canvas');\n\nconst color2Gray = async url => {\n  const image = await loadImage(url);\n  const src = cv.imread(image);\n  console.log(sizeof(src.rows));\n  console.log(memorySizeOf(src));\n  let dst = new cv.Mat(src.size(), 0);\n  let Midle = 0;\n\n  for (let row = 0; row < src.rows; row++) {\n    for (let col = 0; col < src.cols; col++) {\n      dst.ucharPtr(row, col)[0] = Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3);\n    }\n  }\n\n  const canvas = createCanvas(image.width, image.height);\n  cv.imshow(canvas, dst);\n  return canvas;\n};\n\nlet bytes = 0;\n\nfunction memorySizeOf(obj) {\n  function sizeOf(obj) {\n    if (obj !== null && obj !== undefined) {\n      switch (typeof obj) {\n        case 'number':\n          bytes += 8;\n          break;\n\n        case 'string':\n          bytes += obj.length * 2;\n          break;\n\n        case 'boolean':\n          bytes += 4;\n          break;\n\n        case 'object':\n          var objClass = Object.prototype.toString.call(obj).slice(8, -1);\n\n          if (objClass === 'Object' || objClass === 'Array') {\n            for (var key in obj) {\n              if (!obj.hasOwnProperty(key)) continue;\n              sizeOf(obj[key]);\n            }\n          } else bytes += obj.toString().length * 2;\n\n          break;\n      }\n    }\n\n    return bytes;\n  }\n\n  ;\n\n  function formatByteSize(bytes) {\n    if (bytes < 1024) return bytes + \" bytes\";else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + \" KiB\";else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + \" MiB\";else return (bytes / 1073741824).toFixed(3) + \" GiB\";\n  }\n\n  ;\n  return sizeOf(obj);\n}\n\n;\nmodule.exports = {\n  color2Gray\n};","map":{"version":3,"sources":["D:/XLA/project/node_modules/opencv/index.js"],"names":["cv","require","createCanvas","Image","loadImage","createImageData","color2Gray","url","image","src","imread","console","log","sizeof","rows","memorySizeOf","dst","Mat","size","Midle","row","col","cols","ucharPtr","Math","round","canvas","width","height","imshow","bytes","obj","sizeOf","undefined","length","objClass","Object","prototype","toString","call","slice","key","hasOwnProperty","formatByteSize","toFixed","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,KAAhB;AAAwBC,EAAAA,SAAxB;AAAmCC,EAAAA;AAAnC,IAAuDJ,OAAO,CAAC,QAAD,CAApE;;AAEA,MAAMK,UAAU,GAAG,MAAMC,GAAN,IAAa;AAE5B,QAAMC,KAAK,GAAG,MAAMJ,SAAS,CAACG,GAAD,CAA7B;AAEA,QAAME,GAAG,GAAGT,EAAE,CAACU,MAAH,CAAUF,KAAV,CAAZ;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACJ,GAAG,CAACK,IAAL,CAAlB;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYG,YAAY,CAACN,GAAD,CAAxB;AAEA,MAAIO,GAAG,GAAG,IAAIhB,EAAE,CAACiB,GAAP,CAAWR,GAAG,CAACS,IAAJ,EAAX,EAAuB,CAAvB,CAAV;AAEA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,GAAG,CAACK,IAA5B,EAAkCM,GAAG,EAArC,EAAyC;AACrC,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGZ,GAAG,CAACa,IAA5B,EAAkCD,GAAG,EAArC,EAAyC;AAErCL,MAAAA,GAAG,CAACO,QAAJ,CAAaH,GAAb,EAAkBC,GAAlB,EAAuB,CAAvB,IAA4BG,IAAI,CAACC,KAAL,CAAW,CAAChB,GAAG,CAACc,QAAJ,CAAaH,GAAb,EAAkBC,GAAlB,EAAuB,CAAvB,IAA4BZ,GAAG,CAACc,QAAJ,CAAaH,GAAb,EAAkBC,GAAlB,EAAuB,CAAvB,CAA5B,GAAwDZ,GAAG,CAACc,QAAJ,CAAaH,GAAb,EAAkBC,GAAlB,EAAuB,CAAvB,CAAzD,IAAsF,CAAjG,CAA5B;AAEH;AACJ;;AAED,QAAMK,MAAM,GAAGxB,YAAY,CAACM,KAAK,CAACmB,KAAP,EAAcnB,KAAK,CAACoB,MAApB,CAA3B;AAEA5B,EAAAA,EAAE,CAAC6B,MAAH,CAAUH,MAAV,EAAkBV,GAAlB;AAEA,SAAOU,MAAP;AACH,CA3BD;;AA6BA,IAAII,KAAK,GAAG,CAAZ;;AAGA,SAASf,YAAT,CAAsBgB,GAAtB,EAA2B;AAEvB,WAASC,MAAT,CAAgBD,GAAhB,EAAqB;AACjB,QAAGA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKE,SAA3B,EAAsC;AAClC,cAAO,OAAOF,GAAd;AACA,aAAK,QAAL;AACID,UAAAA,KAAK,IAAI,CAAT;AACA;;AACJ,aAAK,QAAL;AACIA,UAAAA,KAAK,IAAIC,GAAG,CAACG,MAAJ,GAAa,CAAtB;AACA;;AACJ,aAAK,SAAL;AACIJ,UAAAA,KAAK,IAAI,CAAT;AACA;;AACJ,aAAK,QAAL;AACI,cAAIK,QAAQ,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,GAA/B,EAAoCS,KAApC,CAA0C,CAA1C,EAA6C,CAAC,CAA9C,CAAf;;AACA,cAAGL,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,OAAzC,EAAkD;AAC9C,iBAAI,IAAIM,GAAR,IAAeV,GAAf,EAAoB;AAChB,kBAAG,CAACA,GAAG,CAACW,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AAC7BT,cAAAA,MAAM,CAACD,GAAG,CAACU,GAAD,CAAJ,CAAN;AACH;AACJ,WALD,MAKOX,KAAK,IAAIC,GAAG,CAACO,QAAJ,GAAeJ,MAAf,GAAwB,CAAjC;;AACP;AAlBJ;AAoBH;;AACD,WAAOJ,KAAP;AACH;;AAAA;;AAED,WAASa,cAAT,CAAwBb,KAAxB,EAA+B;AAC3B,QAAGA,KAAK,GAAG,IAAX,EAAiB,OAAOA,KAAK,GAAG,QAAf,CAAjB,KACK,IAAGA,KAAK,GAAG,OAAX,EAAoB,OAAM,CAACA,KAAK,GAAG,IAAT,EAAec,OAAf,CAAuB,CAAvB,IAA4B,MAAlC,CAApB,KACA,IAAGd,KAAK,GAAG,UAAX,EAAuB,OAAM,CAACA,KAAK,GAAG,OAAT,EAAkBc,OAAlB,CAA0B,CAA1B,IAA+B,MAArC,CAAvB,KACA,OAAM,CAACd,KAAK,GAAG,UAAT,EAAqBc,OAArB,CAA6B,CAA7B,IAAkC,MAAxC;AACR;;AAAA;AAED,SAAOZ,MAAM,CAACD,GAAD,CAAb;AACH;;AAAA;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACbxC,EAAAA;AADa,CAAjB","sourcesContent":["const cv = require('./opencv')\r\nconst { createCanvas, Image , loadImage, createImageData } = require('canvas')\r\n\r\nconst color2Gray = async url => {\r\n\r\n    const image = await loadImage(url)\r\n\r\n    const src = cv.imread(image)\r\n\r\n    console.log(sizeof(src.rows));\r\n    \r\n    console.log(memorySizeOf(src))\r\n\r\n    let dst = new cv.Mat(src.size(), 0)\r\n\r\n    let Midle = 0\r\n\r\n    for (let row = 0; row < src.rows; row++) {\r\n        for (let col = 0; col < src.cols; col++) {\r\n\r\n            dst.ucharPtr(row, col)[0] = Math.round((src.ucharPtr(row, col)[0] + src.ucharPtr(row, col)[1] + src.ucharPtr(row, col)[2]) / 3)\r\n\r\n        }\r\n    }    \r\n\r\n    const canvas = createCanvas(image.width, image.height)\r\n\r\n    cv.imshow(canvas, dst)\r\n\r\n    return canvas\r\n}\r\n\r\nlet bytes = 0;\r\n\r\n\r\nfunction memorySizeOf(obj) {\r\n\r\n    function sizeOf(obj) {\r\n        if(obj !== null && obj !== undefined) {\r\n            switch(typeof obj) {\r\n            case 'number':\r\n                bytes += 8;\r\n                break;\r\n            case 'string':\r\n                bytes += obj.length * 2;\r\n                break;\r\n            case 'boolean':\r\n                bytes += 4;\r\n                break;\r\n            case 'object':\r\n                var objClass = Object.prototype.toString.call(obj).slice(8, -1);\r\n                if(objClass === 'Object' || objClass === 'Array') {\r\n                    for(var key in obj) {\r\n                        if(!obj.hasOwnProperty(key)) continue;\r\n                        sizeOf(obj[key]);\r\n                    }\r\n                } else bytes += obj.toString().length * 2;\r\n                break;\r\n            }\r\n        }\r\n        return bytes;\r\n    };\r\n\r\n    function formatByteSize(bytes) {\r\n        if(bytes < 1024) return bytes + \" bytes\";\r\n        else if(bytes < 1048576) return(bytes / 1024).toFixed(3) + \" KiB\";\r\n        else if(bytes < 1073741824) return(bytes / 1048576).toFixed(3) + \" MiB\";\r\n        else return(bytes / 1073741824).toFixed(3) + \" GiB\";\r\n    };\r\n\r\n    return sizeOf(obj);\r\n};\r\n\r\nmodule.exports = {\r\n    color2Gray\r\n}"]},"metadata":{},"sourceType":"script"}